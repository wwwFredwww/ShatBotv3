from telegram.ext import ApplicationBuilder, CommandHandler
from utils.keep_alive import keep_alive
from handlers.start import start
from handlers.languages import languages
from handlers.categories import categories
from handlers.news import news
from handlers.help import help_command

TOKEN = "7673040365:AAEWfwnvbxAJPQuYfyIbj8APj0Vnqq-H_ho"

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("languages", languages))
    app.add_handler(CommandHandler("categories", categories))
    app.add_handler(CommandHandler("news", news))
    app.add_handler(CommandHandler("help", help_command))

    keep_alive()
    app.run_polling()

if __name__ == "__main__":
    main()




#----------------------------------old version-------------------------------------------

# from telegram.ext import ApplicationBuilder, CommandHandler
# from backgraund import keep_alive  # Flask –¥–ª—è "–æ–∂–∏–≤–ª–µ–Ω–∏—è" –±–æ—Ç–∞
# import requests
# from deep_translator import GoogleTranslator
#
# # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
# TOKEN = "7989705777:AAGb22SDfZHktTREPPwXGcpskQHkMcNiw-g"
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
# async def start(update, context):
#     user_first_name = update.effective_user.first_name
#     await update.message.reply_text(
#         f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! –Ø –±–æ—Ç, –≥–æ—Ç–æ–≤—ã–π —Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
#     )
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /languages
# async def languages(update, context):
#     available_languages = {"ru": "–†—É—Å—Å–∫–∏–π", "en": "English", "es": "Espa√±ol", "de": "Deutsch"}
#     language_list = "\n".join(f"{code}: {name}" for code, name in available_languages.items())
#     await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞:\n\n{language_list}")
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /categories
# async def categories(update, context):
#     categories = ["business", "entertainment", "general", "health", "science", "sports", "technology"]
#     categories_message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + "\n".join(f"üîπ {category}" for category in categories)
#     await update.message.reply_text(categories_message)
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
# def translate_text(text, dest_language="ru"):
#     try:
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º GoogleTranslator –∏–∑ deep-translator
#         translated = GoogleTranslator(source='auto', target=dest_language).translate(text)
#         return translated
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
#         return "‚ùå –ü–µ—Ä–µ–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
#
# # # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
# # def get_latest_news(category="technology"):
# #     try:
# #         api_key = "5c576dc45ba04d9d9667093c7329705b"
# #         url = f"https://newsapi.org/v2/top-headlines?country=us&category={category}&apiKey={api_key}"
# #         response = requests.get(url)
# #         response.raise_for_status()
# #         data = response.json()
# #         if data.get("status") != "ok":
# #             print(f"–û—à–∏–±–∫–∞ API: {data.get('message')}")
# #             return None
# #         return [article["title"] for article in data.get("articles", [])[:5]]
# #     except requests.exceptions.RequestException as e:
# #         print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
# #         return None
# #     except Exception as e:
# #         print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
# #         return None
#
# def get_latest_news(category="technology"):
#     try:
#         api_key = "5c576dc45ba04d9d9667093c7329705b"
#         url = f"https://newsapi.org/v2/top-headlines?country=us&category={category}&apiKey={api_key}"
#         response = requests.get(url)
#         response.raise_for_status()
#         data = response.json()
#         if data.get("status") != "ok":
#             print(f"–û—à–∏–±–∫–∞ API: {data.get('message')}")
#             return None
#
#         # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ URL
#         articles = data.get("articles", [])[:5]
#         return [
#             {
#                 "title": article.get("title"),
#                 "image": article.get("urlToImage"),
#                 "url": article.get("url")
#             }
#             for article in articles
#         ]
#     except requests.exceptions.RequestException as e:
#         print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
#         return None
#     except Exception as e:
#         print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
#         return None
#
#
# # # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /news
# # async def news(update, context):
# #     args = context.args
# #
# #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
# #     if len(args) > 2:
# #         await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –§–æ—Ä–º–∞—Ç: /news <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <—è–∑—ã–∫>.")
# #         return
# #
# #     # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —è–∑—ã–∫
# #     category = args[0] if len(args) > 0 else "technology"
# #     language = args[1] if len(args) > 1 else "ru"
# #
# #     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# #     valid_categories = ["business", "entertainment", "general", "health", "science", "sports", "technology"]
# #     if category not in valid_categories:
# #         await update.message.reply_text(
# #             "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /categories –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
# #         )
# #         return
# #
# #     # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
# #     news_list = get_latest_news(category)
# #     if not news_list:
# #         await update.message.reply_text("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
# #         return
# #
# #     # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏
# #     try:
# #         translated_news = [translate_text(news, dest_language=language) for news in news_list]
# #         news_message = (
# #             f"üì∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ {language.upper()} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}):*\n\n"
# #             + "\n\n".join(f"üîπ {news}" for news in translated_news)
# #         )
# #         await update.message.reply_text(news_message, parse_mode="Markdown")
# #     except Exception as e:
# #         print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
# #         await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#
# async def news(update, context):
#     args = context.args
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
#     if len(args) > 2:
#         await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –§–æ—Ä–º–∞—Ç: /news <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <—è–∑—ã–∫>.")
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —è–∑—ã–∫
#     category = args[0] if len(args) > 0 else "technology"
#     language = args[1] if len(args) > 1 else "ru"
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#     valid_categories = ["business", "entertainment", "general", "health", "science", "sports", "technology"]
#     if category not in valid_categories:
#         await update.message.reply_text(
#             "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /categories –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
#         )
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
#     news_list = get_latest_news(category)
#     if not news_list:
#         await update.message.reply_text("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         return
#
#     # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
#     try:
#         for news_item in news_list:
#             translated_title = translate_text(news_item["title"], dest_language=language)
#             message_text = (
#                 f"üì∞ *{translated_title}*\n\n"
#                 f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ]({news_item['url']})"
#             )
#             # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
#             if news_item["image"]:
#                 await update.message.reply_photo(news_item["image"], caption=message_text, parse_mode="Markdown")
#             else:
#                 await update.message.reply_text(message_text, parse_mode="Markdown")
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
#         await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
# async def help_command(update, context):
#     help_text = (
#         "üëã *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*\n"
#         "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
#         "/news <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <—è–∑—ã–∫> - –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —è–∑—ã–∫—É (–ø—Ä–∏–º–µ—Ä: /news technology en)\n"
#         "/categories - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
#         "/languages - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞\n"
#         "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
#     )
#     await update.message.reply_text(help_text, parse_mode="Markdown")
#
# # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
# def main():
#     # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
#     telegram_app = ApplicationBuilder().token(TOKEN).build()
#
#     # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
#     telegram_app.add_handler(CommandHandler("start", start))
#     telegram_app.add_handler(CommandHandler("languages", languages))
#     telegram_app.add_handler(CommandHandler("categories", categories))
#     telegram_app.add_handler(CommandHandler("news", news))  # –ö–æ–º–∞–Ω–¥–∞ /news
#     telegram_app.add_handler(CommandHandler("help", help_command))
#
#     # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è "–∑–∞—Å—ã–ø–∞–Ω–∏—è" –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
#     keep_alive()
#
#     # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –≤ —Ä–µ–∂–∏–º–µ polling
#     telegram_app.run_polling()
#
# if __name__ == "__main__":
#     main()

