from deep_translator import GoogleTranslator
from utils.constants import AVAILABLE_LANGUAGES
from handlers.jikan_send import jikan_send, jikan_start_send, jikan_stop_send
import requests
import asyncio

async def start_jikan_news(update, context):
    args = context.args
    if len(args) < 1:
        available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
        await update.message.reply_text(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: /jikanstart ru\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {available_langs}"
        )
        return

    language = args[0].lower()
    if language not in AVAILABLE_LANGUAGES:
        available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
        await update.message.reply_text(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {available_langs}"
        )
        return

    url = "https://api.jikan.moe/v4/top/anime"
    response = requests.get(url)

    if response.status_code != 200:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    data = response.json()
    top_anime = data["data"]

    # –°—Ç–∞—Ä—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª
    await jikan_start_send()

    for anime in top_anime:
        if context.chat_data.get("stop_jikan_news"):
            await jikan_stop_send()  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
            await update.message.reply_text("–ù–æ–≤–æ—Å—Ç–∏ Jikan –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
            return

        title = anime["title"]
        translated_title = GoogleTranslator(source="en", target=language).translate(title)

        score = anime.get("score", "N/A")
        synopsis = anime.get("synopsis", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        translated_synopsis = GoogleTranslator(source="en", target=language).translate(synopsis)
        trailer_url = anime.get("trailer", {}).get("url", "–¢—Ä–µ–π–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        message = (
            f"üé• *{translated_title}* (–†–µ–π—Ç–∏–Ω–≥: {score})\n"
            f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {translated_synopsis}"
            f"üì∫ [–¢—Ä–µ–π–ª–µ—Ä]({trailer_url})"
        )

        await jikan_send(context, message)
        await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π

    context.chat_data["stop_jikan_news"] = False
    await update.message.reply_text("–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ Jikan –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")




# from deep_translator import GoogleTranslator
# from utils.constants import AVAILABLE_LANGUAGES
# import requests
# import asyncio
#
# async def start_jikan_news(update, context):
#     args = context.args
#     if len(args) < 1:
#         available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
#         await update.message.reply_text(
#             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: /jikan_start ru\n"
#             f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {available_langs}"
#         )
#         return
#
#     language = args[0].lower()
#     if language not in AVAILABLE_LANGUAGES:
#         available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
#         await update.message.reply_text(
#             f"–ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {available_langs}"
#         )
#         return
#
#     url = "https://api.jikan.moe/v4/top/anime"
#     response = requests.get(url)
#
#     if response.status_code != 200:
#         await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         return
#
#     data = response.json()
#     top_anime = data["data"]
#
#     current_index = context.chat_data.get("jikan_news_index", 0)
#
#     for index in range(current_index, len(top_anime)):
#         if context.chat_data.get("stop_jikan_news"):
#             context.chat_data["jikan_news_index"] = index
#             await update.message.reply_text("–ù–æ–≤–æ—Å—Ç–∏ Jikan –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞.")
#             return
#
#         anime = top_anime[index]
#         title = anime["title"]
#         translated_title = GoogleTranslator(source="en", target=language).translate(title)
#
#         score = anime.get("score", "N/A")
#         synopsis = anime.get("synopsis", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
#         translated_synopsis = GoogleTranslator(source="en", target=language).translate(synopsis)
#
#         image_url = anime["images"]["jpg"]["image_url"]
#         trailer_url = anime.get("trailer", {}).get("url", "–¢—Ä–µ–π–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
#
#         message = (
#             f"üé• *{translated_title}* (–†–µ–π—Ç–∏–Ω–≥: {score})\n"
#             f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {translated_synopsis}\n"
#             f"üì∫ [–¢—Ä–µ–π–ª–µ—Ä]({trailer_url})"
#         )
#
#         if len(message) > 1024:
#             message_parts = [message[i:i+1024] for i in range(0, len(message), 1024)]
#             await context.bot.send_photo(
#                 chat_id=update.effective_chat.id,
#                 photo=image_url,
#                 caption=message_parts[0],
#                 parse_mode="Markdown"
#             )
#             for part in message_parts[1:]:
#                 await context.bot.send_message(
#                     chat_id=update.effective_chat.id,
#                     text=part,
#                     parse_mode="Markdown"
#                 )
#         else:
#             await context.bot.send_photo(
#                 chat_id=update.effective_chat.id,
#                 photo=image_url,
#                 caption=message,
#                 parse_mode="Markdown"
#             )
#
#         await asyncio.sleep(60)
#
#     context.chat_data["jikan_news_index"] = 0
#     context.chat_data["stop_jikan_news"] = False
#     await update.message.reply_text("–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ Jikan –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")



# -----------------------------------------------------------------------------
# async def start_jikan_news(update, context):
#     args = context.args
#     if len(args) < 2:
#         available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
#         await update.message.reply_text(
#             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: /start jikan news jikan_anime ru\n"
#             f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {available_langs}"
#         )
#         return
#
#     category = args[0].lower()
#     language = args[1].lower()
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞
#     if language not in AVAILABLE_LANGUAGES:
#         available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
#         await update.message.reply_text(
#             f"–ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {available_langs}"
#         )
#         return
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#     if category not in CATEGORIES:
#         await update.message.reply_text(
#             f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {', '.join(CATEGORIES)}"
#         )
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Jikan API
#     url = "https://api.jikan.moe/v4/top/anime"
#     response = requests.get(url)
#
#     if response.status_code != 200:
#         await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         return
#
#     data = response.json()
#     top_anime = data["data"]  # –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∏–º–µ
#     start_index = context.chat_data.get("start_index", 0)  # –ù–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å (–ø—Ä–æ–≥—Ä–µ—Å—Å)
#
#     for i in range(start_index, len(top_anime)):
#         if context.chat_data.get("stop_jikan_news", False):
#             context.chat_data["start_index"] = i
#             await update.message.reply_text("–ù–æ–≤–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start jikan news, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
#             return
#
#         anime = top_anime[i]
#         title = anime["title"]
#         translated_title = GoogleTranslator(source="en", target=language).translate(title)
#
#         score = anime.get("score", "N/A")
#         synopsis = anime.get("synopsis", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
#         translated_synopsis = GoogleTranslator(source="en", target=language).translate(synopsis)
#
#         image_url = anime["images"]["jpg"]["image_url"]
#         trailer_url = anime.get("trailer", {}).get("url", "–¢—Ä–µ–π–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
#
#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
#         message = (
#             f"üé• *{translated_title}* (–†–µ–π—Ç–∏–Ω–≥: {score})\n"
#             f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {translated_synopsis}\n"
#             f"üì∫ [–¢—Ä–µ–π–ª–µ—Ä]({trailer_url})"
#         )
#
#         await context.bot.send_photo(
#             chat_id=update.effective_chat.id,
#             photo=image_url,
#             caption=message[:1024],  # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤
#             parse_mode="Markdown"
#         )
#
#         await asyncio.sleep(60)  # –ü–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç–∞
#
#     context.chat_data["start_index"] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
#     await update.message.reply_text("–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
# ------------------------------------------------------------------------

# async def start_jikan_news(update, context):
#     args = context.args
#     if len(args) < 2:
#         available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
#         await update.message.reply_text(
#             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: /news business ru\n"
#             f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {available_langs}"
#         )
#         return
#
#     category = args[0].lower()
#     language = args[1].lower()
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞
#     if language not in AVAILABLE_LANGUAGES:
#         available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
#         await update.message.reply_text(
#             f"–ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {available_langs}"
#         )
#         return
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
#     if category not in CATEGORIES:
#         await update.message.reply_text(
#             f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {', '.join(CATEGORIES)}"
#         )
#         return
#
#
#     elif category == "jikan_anime":
#         # –õ–æ–≥–∏–∫–∞ –¥–ª—è Jikan API
#         url = "https://api.jikan.moe/v4/top/anime"
#         response = requests.get(url)
#
#         if response.status_code == 200:
#             data = response.json()
#             top_anime = data["data"][:5]  # –¢–æ–ø-5 –∞–Ω–∏–º–µ
#
#             for anime in top_anime:
#                 title = anime["title"]
#                 translated_title = GoogleTranslator(source="en", target=language).translate(title)
#
#                 score = anime.get("score", "N/A")
#                 synopsis = anime.get("synopsis", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
#                 translated_synopsis = GoogleTranslator(source="en", target=language).translate(synopsis)
#
#                 image_url = anime["images"]["jpg"]["image_url"]
#                 trailer_url = anime.get("trailer", {}).get("url", "–¢—Ä–µ–π–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
#
#                 # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
#                 message = (
#                     f"üé• *{translated_title}* (–†–µ–π—Ç–∏–Ω–≥: {score})\n"
#                     f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {translated_synopsis}\n"
#                     f"üì∫ [–¢—Ä–µ–π–ª–µ—Ä]({trailer_url})"
#                 )
#
#                 if len(message) > 1024:
#                     message_parts = [message[i:i+1024] for i in range(0, len(message), 1024)]
#                     await context.bot.send_photo(
#                         chat_id=update.effective_chat.id,
#                         photo=image_url,
#                         caption=message_parts[0],
#                         parse_mode="Markdown"
#                     )
#                     for part in message_parts[1:]:
#                         await context.bot.send_message(
#                             chat_id=update.effective_chat.id,
#                             text=part,
#                             parse_mode="Markdown"
#                         )
#                 else:
#                     await context.bot.send_photo(
#                         chat_id=update.effective_chat.id,
#                         photo=image_url,
#                         caption=message,
#                         parse_mode="Markdown"
#                     )
#         else:
#             await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#
#     else:
#         await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}. –ü–æ–∫–∞ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
