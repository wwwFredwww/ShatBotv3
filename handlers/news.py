from deep_translator import GoogleTranslator
from services.news_service import get_latest_news
from utils.constants import CATEGORIES, AVAILABLE_LANGUAGES
import requests

async def news(update, context):
    args = context.args
    if len(args) < 2:
        available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
        await update.message.reply_text(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: /news business ru\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {available_langs}"
        )
        return

    category = args[0].lower()
    language = args[1].lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞
    if language not in AVAILABLE_LANGUAGES:
        available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
        await update.message.reply_text(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {available_langs}"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category not in CATEGORIES:
        await update.message.reply_text(
            f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {', '.join(CATEGORIES)}"
        )
        return

    if category in ["business", "entertainment", "general", "health", "science", "sports", "technology"]:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à `get_latest_news` –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        news_list = get_latest_news(category)

        if not news_list:
            await update.message.reply_text("–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        for news_item in news_list:
            title = news_item.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            translated_title = GoogleTranslator(source="en", target=language).translate(title)

            url = news_item.get("url", "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            image_url = news_item.get("image", None)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = (
                f"üì∞ *{translated_title}*\n\n"
                f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ]({url})"
            )

            if image_url:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=image_url,
                    caption=message,
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(message, parse_mode="Markdown")


    elif category == "jikan_anime":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è Jikan API
        url = "https://api.jikan.moe/v4/top/anime"
        response = requests.get(url)

        if response.status_code == 200:
            data = response.json()
            top_anime = data["data"][:5]  # –¢–æ–ø-5 –∞–Ω–∏–º–µ

            for anime in top_anime:
                title = anime["title"]
                translated_title = GoogleTranslator(source="en", target=language).translate(title)

                score = anime.get("score", "N/A")
                synopsis = anime.get("synopsis", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                translated_synopsis = GoogleTranslator(source="en", target=language).translate(synopsis)

                image_url = anime["images"]["jpg"]["image_url"]
                trailer_url = anime.get("trailer", {}).get("url", "–¢—Ä–µ–π–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                message = (
                    f"üé• *{translated_title}* (–†–µ–π—Ç–∏–Ω–≥: {score})\n"
                    f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {translated_synopsis}\n"
                    f"üì∫ [–¢—Ä–µ–π–ª–µ—Ä]({trailer_url})"
                )

                if len(message) > 1024:
                    message_parts = [message[i:i+1024] for i in range(0, len(message), 1024)]
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=image_url,
                        caption=message_parts[0],
                        parse_mode="Markdown"
                    )
                    for part in message_parts[1:]:
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text=part,
                            parse_mode="Markdown"
                        )
                else:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=image_url,
                        caption=message,
                        parse_mode="Markdown"
                    )
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    else:
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}. –ü–æ–∫–∞ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

