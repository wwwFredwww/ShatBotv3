from deep_translator import GoogleTranslator
from services.news_service import get_latest_news
from utils.constants import CATEGORIES, AVAILABLE_LANGUAGES
import requests

async def news(update, context):
    args = context.args
    if len(args) < 2:
        available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
        await update.message.reply_text(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: /news business ru\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {available_langs}"
        )
        return

    category = args[0].lower()
    language = args[1].lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞
    if language not in AVAILABLE_LANGUAGES:
        available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
        await update.message.reply_text(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {available_langs}"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if category not in CATEGORIES:
        await update.message.reply_text(
            f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {', '.join(CATEGORIES)}"
        )
        return

    if category in ["business", "entertainment", "general", "health", "science", "sports", "technology"]:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à `get_latest_news` –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        news_list = get_latest_news(category)

        if not news_list:
            await update.message.reply_text("–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        for news_item in news_list:
            title = news_item.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
            translated_title = GoogleTranslator(source="en", target=language).translate(title)

            url = news_item.get("url", "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            image_url = news_item.get("image", None)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message = (
                f"üì∞ *{translated_title}*\n\n"
                f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ]({url})"
            )

            if image_url:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=image_url,
                    caption=message,
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(message, parse_mode="Markdown")

    elif category == "animechan":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è AnimeChan API
        url = "https://animechan.xyz/api/random"
        response = requests.get(url)

        if response.status_code == 200:
            try:
                data = response.json()
                anime = data.get("anime", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–Ω–∏–º–µ")
                character = data.get("character", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂")
                quote = data.get("quote", "–¶–∏—Ç–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

                # –ü–µ—Ä–µ–≤–æ–¥ —Ü–∏—Ç–∞—Ç—ã
                translated_quote = GoogleTranslator(source="en", target=language).translate(quote)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = (
                    f"üéå *–¶–∏—Ç–∞—Ç–∞ –∏–∑ –∞–Ω–∏–º–µ*: _{anime}_\n"
                    f"üë§ *–ü–µ—Ä—Å–æ–Ω–∞–∂*: {character}\n"
                    f"üí¨ *–¶–∏—Ç–∞—Ç–∞*: {translated_quote}"
                )

                await update.message.reply_text(message, parse_mode="Markdown")
            except Exception as e:
                await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif category == "jikan_anime":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è Jikan API
        url = "https://api.jikan.moe/v4/top/anime"
        response = requests.get(url)

        if response.status_code == 200:
            data = response.json()
            top_anime = data["data"][:5]  # –¢–æ–ø-5 –∞–Ω–∏–º–µ

            for anime in top_anime:
                title = anime["title"]
                translated_title = GoogleTranslator(source="en", target=language).translate(title)

                score = anime.get("score", "N/A")
                synopsis = anime.get("synopsis", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
                translated_synopsis = GoogleTranslator(source="en", target=language).translate(synopsis)

                image_url = anime["images"]["jpg"]["image_url"]
                trailer_url = anime.get("trailer", {}).get("url", "–¢—Ä–µ–π–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                message = (
                    f"üé• *{translated_title}* (–†–µ–π—Ç–∏–Ω–≥: {score})\n"
                    f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {translated_synopsis}\n"
                    f"üì∫ [–¢—Ä–µ–π–ª–µ—Ä]({trailer_url})"
                )

                if len(message) > 1024:
                    message_parts = [message[i:i+1024] for i in range(0, len(message), 1024)]
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=image_url,
                        caption=message_parts[0],
                        parse_mode="Markdown"
                    )
                    for part in message_parts[1:]:
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text=part,
                            parse_mode="Markdown"
                        )
                else:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=image_url,
                        caption=message,
                        parse_mode="Markdown"
                    )
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    else:
        await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}. –ü–æ–∫–∞ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

#  ----------------------------v3--------------------------------------------
# import requests
# from deep_translator import GoogleTranslator
# from utils.constants import CATEGORIES, AVAILABLE_LANGUAGES
#
# async def news(update, context):
#     args = context.args
#     if len(args) < 2:
#         available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
#         await update.message.reply_text(
#             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: /news animechan ru\n"
#             f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏: {available_langs}"
#         )
#         return
#
#     category = args[0].lower()
#     language = args[1].lower()
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —è–∑—ã–∫ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
#     if language not in AVAILABLE_LANGUAGES:
#         available_langs = ', '.join(f"{key} ({value})" for key, value in AVAILABLE_LANGUAGES.items())
#         await update.message.reply_text(
#             f"–ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {available_langs}"
#         )
#         return
#
#     if category not in CATEGORIES:
#         await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {', '.join(CATEGORIES)}")
#         return
#
#     if category == "animechan":
#         # AnimeChan API –∑–∞–ø—Ä–æ—Å
#         url = "https://animechan.xyz/api/random"
#         response = requests.get(url)
#
#         if response.status_code == 200:
#             try:
#                 data = response.json()
#                 anime = data.get("anime", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–Ω–∏–º–µ")
#                 character = data.get("character", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂")
#                 quote = data.get("quote", "–¶–∏—Ç–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
#
#                 # –ü–µ—Ä–µ–≤–æ–¥ —Ü–∏—Ç–∞—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
#                 translated_quote = GoogleTranslator(source="en", target=language).translate(quote)
#
#                 # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#                 message = (
#                     f"üéå *–¶–∏—Ç–∞—Ç–∞ –∏–∑ –∞–Ω–∏–º–µ*: _{anime}_\n"
#                     f"üë§ *–ü–µ—Ä—Å–æ–Ω–∞–∂*: {character}\n"
#                     f"üí¨ *–¶–∏—Ç–∞—Ç–∞*: {translated_quote}"
#                 )
#
#                 await update.message.reply_text(message, parse_mode="Markdown")
#             except Exception as e:
#                 await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
#         else:
#             await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#     elif category == "jikan_anime":
#         # Jikan API –∑–∞–ø—Ä–æ—Å
#         url = "https://api.jikan.moe/v4/top/anime"
#         response = requests.get(url)
#
#         if response.status_code == 200:
#             data = response.json()
#             top_anime = data["data"][:5]  # –¢–æ–ø-5 –∞–Ω–∏–º–µ
#
#             for anime in top_anime:
#                 title = anime["title"]
#                 translated_title = GoogleTranslator(source="en", target=language).translate(title)
#
#                 score = anime.get("score", "N/A")
#                 synopsis = anime.get("synopsis", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
#                 translated_synopsis = GoogleTranslator(source="en", target=language).translate(synopsis)
#
#                 image_url = anime["images"]["jpg"]["image_url"]
#                 trailer_url = anime.get("trailer", {}).get("url", "–¢—Ä–µ–π–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
#
#                 # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
#                 message = (
#                     f"üé• *{translated_title}* (–†–µ–π—Ç–∏–Ω–≥: {score})\n"
#                     f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {translated_synopsis}\n"
#                     f"üì∫ [–¢—Ä–µ–π–ª–µ—Ä]({trailer_url})"
#                 )
#
#                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
#                 if len(message) > 1024:
#                     message_parts = [message[i:i+1024] for i in range(0, len(message), 1024)]
#                     await context.bot.send_photo(
#                         chat_id=update.effective_chat.id,
#                         photo=image_url,
#                         caption=message_parts[0],
#                         parse_mode="Markdown"
#                     )
#                     for part in message_parts[1:]:
#                         await context.bot.send_message(
#                             chat_id=update.effective_chat.id,
#                             text=part,
#                             parse_mode="Markdown"
#                         )
#                 else:
#                     await context.bot.send_photo(
#                         chat_id=update.effective_chat.id,
#                         photo=image_url,
#                         caption=message,
#                         parse_mode="Markdown"
#                     )
#         else:
#             await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#     else:
#         await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}. –ü–æ–∫–∞ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")


# ------------------------------------v2------------------------------------
# import requests
# from deep_translator import GoogleTranslator
#
# from utils.constants import CATEGORIES
#
# from utils.constants import AVAILABLE_LANGUAGES
#
# async def news(update, context):
#     args = context.args
#     if len(args) < 1:
#         await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–∏–º–µ—Ä: /news technology")
#         return
#
#     category = args[0].lower()
#     if category not in CATEGORIES:
#         await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {', '.join(CATEGORIES)}")
#         return
#
#     if category == "animechan":
#         # AnimeChan API –∑–∞–ø—Ä–æ—Å
#         url = "https://animechan.xyz/api/random"
#         response = requests.get(url)
#
#         if response.status_code == 200:
#             try:
#                 data = response.json()
#                 anime = data.get("anime", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∞–Ω–∏–º–µ")
#                 character = data.get("character", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂")
#                 quote = data.get("quote", "–¶–∏—Ç–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
#
#                 # –ü–µ—Ä–µ–≤–æ–¥ —Ü–∏—Ç–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π
#                 translated_quote = GoogleTranslator(source="en", target="ru").translate(quote)
#
#                 # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#                 message = (
#                     f"üéå *–¶–∏—Ç–∞—Ç–∞ –∏–∑ –∞–Ω–∏–º–µ*: _{anime}_\n"
#                     f"üë§ *–ü–µ—Ä—Å–æ–Ω–∞–∂*: {character}\n"
#                     f"üí¨ *–¶–∏—Ç–∞—Ç–∞*: {translated_quote}"
#                 )
#
#                 await update.message.reply_text(message, parse_mode="Markdown")
#             except Exception as e:
#                 await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
#         else:
#             await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#     elif category == "jikan_anime":
#     #  Jikan API –∑–∞–ø—Ä–æ—Å
#         url = "https://api.jikan.moe/v4/top/anime"
#         response = requests.get(url)
#
#         if response.status_code == 200:
#             data = response.json()
#             top_anime = data["data"][:5]  # –¢–æ–ø-5 –∞–Ω–∏–º–µ
#
#             for anime in top_anime:
#                 title = anime["title"]  # –ù–∞–∑–≤–∞–Ω–∏–µ
#                 translated_title = GoogleTranslator(source="en", target="ru").translate(title)
#
#                 score = anime.get("score", "N/A")  # –û—Ü–µ–Ω–∫–∞
#                 synopsis = anime.get("synopsis", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")  # –û–ø–∏—Å–∞–Ω–∏–µ
#                 translated_synopsis = GoogleTranslator(source="en", target="ru").translate(synopsis)
#
#                 image_url = anime["images"]["jpg"]["image_url"]  # –ö–∞—Ä—Ç–∏–Ω–∫–∞
#                 trailer_url = anime.get("trailer", {}).get("url", "–¢—Ä–µ–π–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")  # –¢—Ä–µ–π–ª–µ—Ä
#
#                 # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
#                 message = (
#                     f"üé• *{translated_title}* (–†–µ–π—Ç–∏–Ω–≥: {score})\n"
#                     f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {translated_synopsis}\n"
#                     f"üì∫ [–¢—Ä–µ–π–ª–µ—Ä]({trailer_url})"
#                 )
#
#                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
#                 if len(message) > 1024:
#                     # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
#                     message_parts = [
#                         message[i:i+1024] for i in range(0, len(message), 1024)
#                     ]
#                     await context.bot.send_photo(
#                         chat_id=update.effective_chat.id,
#                         photo=image_url,
#                         caption=message_parts[0],  # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å—å—é
#                         parse_mode="Markdown"
#                     )
#                     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#                     for part in message_parts[1:]:
#                         await context.bot.send_message(
#                             chat_id=update.effective_chat.id,
#                             text=part,
#                             parse_mode="Markdown"
#                         )
#                 else:
#                     # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ 1024 —Å–∏–º–≤–æ–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
#                     await context.bot.send_photo(
#                         chat_id=update.effective_chat.id,
#                         photo=image_url,
#                         caption=message,
#                         parse_mode="Markdown"
#                     )
#         else:
#             await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#     else:
#         await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}. –ü–æ–∫–∞ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")


# -----------------------------------------------------------------
# async def news(update, context):
#     args = context.args
#     if len(args) < 1:
#         await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–∏–º–µ—Ä: /news technology")
#         return
#
#     category = args[0].lower()
#     if category not in CATEGORIES:
#         await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {', '.join(CATEGORIES)}")
#         return
#
#     if category == "jikan_anime":
#         # Jikan API –∑–∞–ø—Ä–æ—Å
#         url = "https://api.jikan.moe/v4/top/anime"
#         response = requests.get(url)
#
#         if response.status_code == 200:
#             data = response.json()
#             top_anime = data["data"][:5]  # –¢–æ–ø-5 –∞–Ω–∏–º–µ
#
#             for anime in top_anime:
#                 title = anime["title"]  # –ù–∞–∑–≤–∞–Ω–∏–µ
#                 translated_title = GoogleTranslator(source="en", target="ru").translate(title)
#
#                 score = anime.get("score", "N/A")  # –û—Ü–µ–Ω–∫–∞
#                 synopsis = anime.get("synopsis", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")  # –û–ø–∏—Å–∞–Ω–∏–µ
#                 translated_synopsis = GoogleTranslator(source="en", target="ru").translate(synopsis)
#
#                 image_url = anime["images"]["jpg"]["image_url"]  # –ö–∞—Ä—Ç–∏–Ω–∫–∞
#                 trailer_url = anime.get("trailer", {}).get("url", "–¢—Ä–µ–π–ª–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")  # –¢—Ä–µ–π–ª–µ—Ä
#
#                 # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
#                 message = (
#                     f"üé• *{translated_title}* (–†–µ–π—Ç–∏–Ω–≥: {score})\n"
#                     f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {translated_synopsis}\n"
#                     f"üì∫ [–¢—Ä–µ–π–ª–µ—Ä]({trailer_url})"
#                 )
#
#                 # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
#                 if len(message) > 1024:
#                     # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
#                     message_parts = [
#                         message[i:i+1024] for i in range(0, len(message), 1024)
#                     ]
#                     await context.bot.send_photo(
#                         chat_id=update.effective_chat.id,
#                         photo=image_url,
#                         caption=message_parts[0],  # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å—å—é
#                         parse_mode="Markdown"
#                     )
#                     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#                     for part in message_parts[1:]:
#                         await context.bot.send_message(
#                             chat_id=update.effective_chat.id,
#                             text=part,
#                             parse_mode="Markdown"
#                         )
#                 else:
#                     # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ 1024 —Å–∏–º–≤–æ–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
#                     await context.bot.send_photo(
#                         chat_id=update.effective_chat.id,
#                         photo=image_url,
#                         caption=message,
#                         parse_mode="Markdown"
#                     )
#         else:
#             await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#     else:
#         await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}. –ü–æ–∫–∞ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

#_________________________________________________________________________
# import requests
# from utils.constants import CATEGORIES
#
# async def news(update, context):
#     # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
#     args = context.args
#     if len(args) < 1:
#         await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–∏–º–µ—Ä: /news technology")
#         return
#
#     category = args[0].lower()
#     if category not in CATEGORIES:
#         await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: {', '.join(CATEGORIES)}")
#         return
#
#     if category == "jikan_anime":
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º Jikan API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ
#         url = "https://api.jikan.moe/v4/top/anime"
#         response = requests.get(url)
#
#         if response.status_code == 200:
#             data = response.json()
#             top_anime = data["data"][:5]  # –ë–µ—Ä—ë–º —Ç–æ–ø-5 –∞–Ω–∏–º–µ
#
#             message = "*–¢–æ–ø –∞–Ω–∏–º–µ:*\n\n"
#             for anime in top_anime:
#                 title = anime["title"]
#                 score = anime.get("score", "N/A")
#                 url = anime["url"]
#                 message += f"üé• *{title}* (Rating: {score})\nüîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({url})\n\n"
#
#             await update.message.reply_text(message, parse_mode="Markdown")
#         else:
#             await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#     else:
#         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
#         await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}. –ü–æ–∫–∞ –æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

# ---------------------------------------------------------------------------
# from services.news_service import get_latest_news
# from services.translator import translate_text
# from utils.constants import CATEGORIES
#
# async def news(update, context):
#     args = context.args
#     category = args[0] if len(args) > 0 else "technology"
#     language = args[1] if len(args) > 1 else "ru"
#
#     if category not in CATEGORIES:
#         await update.message.reply_text(
#             "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /categories –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
#         )
#         return
#
#     news_list = get_latest_news(category)
#     if not news_list:
#         await update.message.reply_text("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         return
#
#     for news_item in news_list:
#         translated_title = translate_text(news_item["title"], dest_language=language)
#         message_text = (
#             f"üì∞ *{translated_title}*\n\n"
#             f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ]({news_item['url']})"
#         )
#         if news_item["image"]:
#             await update.message.reply_photo(news_item["image"], caption=message_text, parse_mode="Markdown")
#         else:
#             await update.message.reply_text(message_text, parse_mode="Markdown")

# -----------------------------------------------------------------------

# from services.news_service import get_latest_news
# from services.translator import translate_text
# from utils.constants import CATEGORIES
#
# async def news(update, context):
#     args = context.args
#     category = args[0] if len(args) > 0 else "technology"
#     language = args[1] if len(args) > 1 else "ru"
#
#     if category not in CATEGORIES:
#         await update.message.reply_text(
#             "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /categories –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
#         )
#         return
#
#     news_list = get_latest_news(category)
#     if not news_list:
#         await update.message.reply_text("‚ùå –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         return
#
#     for news_item in news_list:
#         translated_title = translate_text(news_item["title"], dest_language=language)
#         message_text = (
#             f"üì∞ *{translated_title}*\n\n"
#             f"üîó [–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ]({news_item['url']})"
#         )
#         if news_item["image"]:
#             await update.message.reply_photo(news_item["image"], caption=message_text, parse_mode="Markdown")
#         else:
#             await update.message.reply_text(message_text, parse_mode="Markdown")
